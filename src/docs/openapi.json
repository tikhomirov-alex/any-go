{
  "openapi": "3.0.3",
  "info": {
    "title": "AnyGo API",
    "version": "1.0"
  },
  "servers": [
    {
      "url": "localhost:5000/",
      "description": "Local development server"
    }
  ],
  "tags": [
    {
      "name": "auth",
      "description": "Authentication methods"
    },
    {
      "name": "profiles",
      "description": "Profile data methods"
    },
    {
      "name": "friends",
      "description": "Friendship"
    }
  ],
  "paths": {
    "/auth": {
      "get": {
        "tags": [
          "auth"
        ],
        "summary": "Returns public user data by token",
        "security": [
          {
            "AnyGoAuth": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PublicUserData"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/auth/signup": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Registers a new user",
        "requestBody": {
          "$ref": "#/components/requestBodies/SignUpRequestData"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/AuthData"
          },
          "400": {
            "$ref": "#/components/responses/IncorrectInputSignupDataError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Authenticates an existing user",
        "requestBody": {
          "$ref": "#/components/requestBodies/LoginRequestData"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/AuthData"
          },
          "400": {
            "$ref": "#/components/responses/IncorrectInputLoginDataError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/profiles/{user_id}": {
      "get": {
        "parameters": [
          {
            "name": "user_id",
            "schema": {
              "required": [
                "user_id"
              ],
              "properties": {
                "user_id": {
                  "type": "string",
                  "example": "64f591d34f60c2bae4400000"
                }
              }
            },
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "profiles"
        ],
        "summary": "Returns user profile data",
        "responses": {
          "200": {
            "$ref": "#/components/responses/UserProfileData"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/profiles": {
      "get": {
        "tags": [
          "profiles"
        ],
        "summary": "Gets all profiles",
        "responses": {
          "200": {
            "description": "Succesful got all profiles",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "profiles": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Profile"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "profiles"
        ],
        "summary": "Updates a profile by its id",
        "security": [
          {
            "AnyGoAuth": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/UserProfileData"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/friends/{friend_id}": {
      "get": {
        "parameters": [
          {
            "name": "friend_id",
            "schema": {
              "required": [
                "friend_id"
              ],
              "properties": {
                "user_id": {
                  "type": "string",
                  "example": "64f591d34f60c2bae4400000"
                }
              }
            },
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "friends"
        ],
        "summary": "Request for friendship",
        "security": [
          {
            "AnyGoAuth": []
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/FriendshipData"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "friend_id",
            "schema": {
              "required": [
                "friend_id"
              ],
              "properties": {
                "user_id": {
                  "type": "string",
                  "example": "64f591d34f60c2bae4400000"
                }
              }
            },
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "friends"
        ],
        "summary": "Request for friendship",
        "security": [
          {
            "AnyGoAuth": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/FriendshipData"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/friends/accept/{friend_id}": {
      "get": {
        "parameters": [
          {
            "name": "friend_id",
            "schema": {
              "required": [
                "friend_id"
              ],
              "properties": {
                "user_id": {
                  "type": "string",
                  "example": "64f591d34f60c2bae4400000"
                }
              }
            },
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "friends"
        ],
        "summary": "Request for friendship",
        "security": [
          {
            "AnyGoAuth": []
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/FriendshipData"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/friends/unsubscribe/{friend_id}": {
      "delete": {
        "parameters": [
          {
            "name": "friend_id",
            "schema": {
              "required": [
                "friend_id"
              ],
              "properties": {
                "user_id": {
                  "type": "string",
                  "example": "64f591d34f60c2bae4400000"
                }
              }
            },
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "friends"
        ],
        "summary": "Request for friendship",
        "security": [
          {
            "AnyGoAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "Success"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Profile": {
        "description": "User profile data",
        "type": "object",
        "required": [
          "name",
          "surname"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "Илон"
          },
          "surname": {
            "type": "string",
            "example": "Маск"
          },
          "birthday": {
            "type": "string",
            "format": "date",
            "example": "2001-01-01"
          },
          "avatar": {
            "type": "string",
            "format": "url",
            "example": "\\images\\2023\\08\\01\\1694079068000.jpg"
          },
          "city": {
            "type": "string",
            "example": "Москва"
          },
          "about": {
            "type": "string",
            "example": "Меня зовут Илон Маск и я очень люблю сервис AnyGo :D"
          }
        }
      },
      "Friendship": {
        "description": "User relations",
        "type": "object",
        "required": [
          "user1",
          "user2",
          "status"
        ],
        "properties": {
          "user1": {
            "type": "string",
            "example": "64f591d34f60c2bae4400000"
          },
          "user2": {
            "type": "string",
            "example": "64f591d34f60c2bae4400000"
          },
          "status": {
            "type": "number",
            "enum": [
              1,
              2,
              3
            ]
          }
        }
      }
    },
    "requestBodies": {
      "SignUpRequestData": {
        "description": "User data for registering",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "email",
                "name",
                "password",
                "password2"
              ],
              "properties": {
                "email": {
                  "type": "string",
                  "example": "john_doe@example.com"
                },
                "name": {
                  "type": "string",
                  "example": "John Doe"
                },
                "username": {
                  "type": "string",
                  "example": "john_doe_99"
                },
                "password": {
                  "type": "string",
                  "example": "MyStrongPass.99"
                },
                "password2": {
                  "type": "string",
                  "example": "MyStrongPass.99"
                }
              }
            }
          }
        }
      },
      "LoginRequestData": {
        "description": "User data for login",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "email",
                "password"
              ],
              "properties": {
                "email": {
                  "type": "string",
                  "example": "john_doe@example.com"
                },
                "password": {
                  "type": "string",
                  "example": "MyStrongPass.99"
                }
              }
            }
          }
        }
      }
    },
    "responses": {
      "IncorrectInputSignupDataError": {
        "description": "Incorrect input data",
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "errors": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "string",
                      "example": "Email already exists"
                    },
                    "name": {
                      "type": "string",
                      "example": "Field name should be 3 to 30 characters"
                    },
                    "username": {
                      "type": "string",
                      "example": "Username already exists"
                    },
                    "password": {
                      "type": "string",
                      "example": "Passwords do not match"
                    },
                    "password2": {
                      "type": "string",
                      "example": "Passwords do not match"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "IncorrectInputLoginDataError": {
        "description": "Incorrect input data",
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "errors": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "string",
                      "example": "User not found"
                    },
                    "password": {
                      "type": "string",
                      "example": "Incorrect password"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "UnauthorizedError": {
        "description": "User auth token not received by client",
        "content": {
          "text/plain": {
            "example": "Unauthorized"
          }
        }
      },
      "NotFoundError": {
        "description": "Not found",
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "msg": {
                  "type": "string",
                  "example": "... not found"
                }
              }
            }
          }
        }
      },
      "InternalServerError": {
        "description": "Internal server error",
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "msg": {
                  "type": "string",
                  "example": "Server error: ...any reason..."
                }
              }
            }
          }
        }
      },
      "AuthData": {
        "description": "Successful authorization",
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "token": {
                  "type": "string",
                  "example": "Bearer eyJhb...cLCi8"
                }
              }
            }
          }
        }
      },
      "PublicUserData": {
        "description": "Public user data",
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "id": {
                  "type": "string",
                  "example": "64f591d34f60c2bae4400000"
                },
                "name": {
                  "type": "string",
                  "example": "John Doe"
                },
                "username": {
                  "type": "string",
                  "example": "john_doe_99"
                },
                "email": {
                  "type": "string",
                  "example": "john_doe@example.com"
                }
              }
            }
          }
        }
      },
      "UserProfileData": {
        "description": "User profile data",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Profile"
            }
          }
        }
      },
      "FriendshipData": {
        "description": "User relations",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Friendship"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "AnyGoAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}